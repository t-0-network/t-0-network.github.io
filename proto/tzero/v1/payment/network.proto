syntax = "proto3";

package tzero.v1.payment;

import "tzero/v1/common/common.proto";
import "tzero/v1/common/payment_method.proto";
import "tzero/v1/common/payment_receipt.proto";
import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";

/**
 * This service is used by provider to interact with the Network, e.g. push quotes and initiate payments.
 *
 * All methods of this service are idempotent, meaning they are safe to retry and multiple calls with the same parameters will have no additional effect.
 */
service NetworkService {

  /**
    * Used by the provider to publish pay-in and pay-out quotes (FX rates) into the network.
    * These quotes include tiered pricing bands and an expiration timestamp.
   */
  rpc UpdateQuote(UpdateQuoteRequest) returns (UpdateQuoteResponse)  {
    option idempotency_level = IDEMPOTENT;
  };

  /**
   * Request the best available quote for a payout in a specific currency, for a given amount.
   * If the payout quote exists, but the credit limit is exceeded, this quote will not be considered.
   */
  rpc GetPayoutQuote(GetPayoutQuoteRequest) returns (GetPayoutQuoteResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };

  /**
    * Submit a request to create a new payment. PayIn currency and QuoteId are the optional parameters.
    * If the payIn currency is not specified, the network will use USD as the default payIn currency, and considering
    * the amount in USD.
    * If specified, it must be a valid currency code - in this case the network will try to find the payIn quote for the
    * specified currency and considering the band from the provider initiated this request. So this is only possible, if
    * this provider already submitted the payIn quote for the specified currency using UpdateQuote rpc.
    * If the quoteID is specified, it must be a valid quoteId that was previously returned by the GetPayoutQuote method.
    * If the quoteId is not specified, the network will try to find a suitable quote for the payout currency and amount,
    * same way as GetPayoutQuote rpc.
   */
  rpc CreatePayment(CreatePaymentRequest) returns (CreatePaymentResponse) {
    option idempotency_level = IDEMPOTENT;
  };

  /**
   * Inform the network that a payout has been completed. This endpoint is called by the payout
   * provider, specifying the payment ID and payout ID, which was provided when the payout request was made to this provider.
   */
  rpc ConfirmPayout(ConfirmPayoutRequest) returns (ConfirmPayoutResponse)  {
    option idempotency_level = IDEMPOTENT;
  };
}

/*
 * Base currency is always USD, so the quotes are always in USD/currency format.
 */
message UpdateQuoteRequest {
  /**
   * Zero or more quotes for pay-out operations, each quote must have a unique currency, and one or more bands, with the
   * unique client_quote_id for each band.
   */
  repeated Quote pay_out = 10;
  /**
   * Zero or more quotes for pay-in operations, each quote must have a unique currency, and one or more bands, with the
   * unique client_quote_id for each band.
   */
  repeated Quote pay_in = 20;

  message Quote {
    // ISO 4217 currency code (3 uppercase letters)
    string currency = 10 [(buf.validate.field).string = {
      len: 3,
      pattern: "^[A-Z]{3}$"
    }]; // BRL, EUR, GBP, etc. (ISO 4217 currency code)
    // Quote type must be specified
    QuoteType quote_type = 20 [(buf.validate.field).enum = {
      not_in: [0]
    }]; // type of the quote, e.g. real-time or guaranteed
    // Payment method must be specified
    tzero.v1.common.PaymentMethodType payment_method = 25 [(buf.validate.field).enum = {
      not_in: [0]
    }];
    // At least one band is required
    repeated Band bands = 30 [(buf.validate.field).repeated = {
      min_items: 1
    }]; // list of bands for this quote
    // Expiration must be in the future
    google.protobuf.Timestamp expiration = 60 [(buf.validate.field).timestamp.gt_now = true]; // expiration time of the quote
    // Timestamp is required
    google.protobuf.Timestamp timestamp = 70 [(buf.validate.field).required = true]; // timestamp quote was created

    message Band {
      // Client quote ID must be non-empty and reasonable length
      string client_quote_id = 10 [(buf.validate.field).string = {
        min_len: 1,
        max_len: 64
      }]; // unique client generated id for this band
      // Max amount is required
      tzero.v1.common.Decimal max_amount = 40 [(buf.validate.field).required = true]; // max amount of USD this quote is applicable for. Please look into documentation for valid amounts.
      // Rate is required and must be positive
      tzero.v1.common.Decimal rate = 50 [(buf.validate.field).required = true]; // USD/currency rate
    }
  }
}

message UpdateQuoteResponse {}

message GetPayoutQuoteRequest {
  // ISO 4217 currency code (3 uppercase letters)
  string payout_currency = 10 [(buf.validate.field).string = {
    len: 3,
    pattern: "^[A-Z]{3}$"
  }]; // ISO 4217 currency code, e.g. EUR, GBP, etc. in which the payout should be made
  // Amount is required
  tzero.v1.common.Decimal amount = 20 [(buf.validate.field).required = true]; // amount in quote currency, only USD is supported
  // Quote type must be specified
  QuoteType quote_type = 30 [(buf.validate.field).enum = {
    not_in: [0]
  }]; // type of the quote, e.g. real-time or guaranteed
  // Payout method must be specified
  tzero.v1.common.PaymentMethodType payout_method = 40 [(buf.validate.field).enum = {
    not_in: [0]
  }]; // payment method to use for the payout, e.g. bank transfer, card, etc.
}

message GetPayoutQuoteResponse {
  // Rate is required
  tzero.v1.common.Decimal rate = 10 [(buf.validate.field).required = true]; // rate in USD/currency, e.g. 1.2345 for 1 USD = 1.2345 EUR
  // Expiration must be in the future
  google.protobuf.Timestamp expiration = 20 [(buf.validate.field).timestamp.gt_now = true]; // expiration time of the quote
  // Quote ID is required
  QuoteId quote_id = 30 [(buf.validate.field).required = true]; //
}

message CreatePaymentRequest{
  // Payment client ID must be non-empty and reasonable length
  string payment_client_id = 10 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 64
  }]; // unique client generated id for this payment

  // ISO 4217 currency code (3 uppercase letters)
  string payout_currency = 20 [(buf.validate.field).string = {
    len: 3,
    pattern: "^[A-Z]{3}$"
  }]; // ISO 4217 currency code, e.g. EUR, GBP, etc. in which the payout should be made
  // Payout details are required
  tzero.v1.common.PaymentMethod payout_details = 25 [(buf.validate.field).required = true]; // payment method to use for the payout, e.g. bank transfer, card, etc.
  // Amount is required
  tzero.v1.common.Decimal amount = 30 [(buf.validate.field).required = true]; // amount in the payin currency, by default USD (if the payIn currency is not specified)
  // If specified, must be valid ISO 4217 currency code
  optional string payin_currency = 40 [(buf.validate.field).string = {
    len: 3,
    pattern: "^[A-Z]{3}$"
  }]; // if not specified, USD is used

  Sender sender = 50; // optional or option in the oneof?
  Recipient recipient = 60; // optional or option in the oneof?

  optional string reference = 70 [deprecated = true, (buf.validate.field).string.max_len = 140]; // optional reference for the payment, up to 140 characters

  optional QuoteId quote_id = 100; // if specified, must be a valid quoteId that was previously returned by the GetPayoutQuote method

  // Work in progress
  message Sender {
    oneof sender {
      PrivatePerson private_person = 10;
    }
  }

  // Work in progress
  message Recipient {
    oneof recipient {
      PrivatePerson private_person = 10;
    }
  }

  // Work in progress
  message PrivatePerson {
    // Private person client ID must be non-empty
    string private_person_client_id = 10 [(buf.validate.field).string = {
      min_len: 1,
      max_len: 64
    }];
    // First name must be non-empty and reasonable length
    string first_name = 20 [(buf.validate.field).string = {
      min_len: 1,
      max_len: 50
    }];
    // Last name must be non-empty and reasonable length
    string last_name = 30 [(buf.validate.field).string = {
      min_len: 1,
      max_len: 50
    }];
  }
}

message QuoteId {
  // Quote ID must be positive
  int64 quote_id = 30 [(buf.validate.field).int64.gt = 0]; // unique identifier of the quote within the specified provider
  // Provider ID must be positive
  int32 provider_id = 40 [(buf.validate.field).int32.gt = 0]; // provider id of the quote
}

message CreatePaymentResponse {
  // Payment client ID must be non-empty
  string payment_client_id = 10 [(buf.validate.field).string.min_len = 1]; // client generated id supplied in the request

  oneof result {
    option (buf.validate.oneof).required = true;
    /**
     * Success response - means the payment was accepted, but the payout is not yet completed. This means, the network found
     * a suitable quote for the payout currency and amount, and instructed the payout provider to process the payout.
     */
    Success success = 20;
    /**
     * Failure response - means the payment was not accepted, e.g. the network could not find a suitable quote for the
     * payout currency and amount, or the credit limit is exceeded for the available quotes.
     */
    Failure failure = 30;
  };

  message Success {
    // Payment ID must be positive
    int64 payment_id = 10 [(buf.validate.field).int64.gt = 0]; // payment id assigned by the network
  }

  message Failure {
    enum Reason {
      REASON_UNSPECIFIED = 0;

    }
  }
}

message ConfirmPayoutRequest{
  // Payment ID must be positive
  int64 payment_id = 10 [(buf.validate.field).int64.gt = 0]; // payment id assigned by the network, this is the same payment id that was provided in the PayoutRequest
  // Payout ID must be positive
  int64 payout_id = 20 [(buf.validate.field).int64.gt = 0]; // payout id assigned by the payout provider, this is the same payout id that was provided in the PayoutRequest

  /**
  * Payment receipt might contain metadata about payment recognizable by pay-in provider.
  */
  tzero.v1.common.PaymentReceipt receipt = 30;
}

message ConfirmPayoutResponse{}


enum QuoteType {
  QUOTE_TYPE_UNSPECIFIED = 0;
  QUOTE_TYPE_REALTIME = 1; // real-time quote must be valid at least for 30 seconds (TBD)
  //QUOTE_TYPE_GUARANTEED = 2; // real-time quote must be valid at least for N minutes (TBD)
}