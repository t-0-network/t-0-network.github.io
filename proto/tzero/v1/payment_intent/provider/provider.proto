syntax = "proto3";

package tzero.v1.payment_intent.provider;

import "tzero/v1/common/common.proto";
import "tzero/v1/common/payment_method.proto";
import "buf/validate/validate.proto";

/**
* NetworkService is used by provider in order to notify network on payment intent updates
*/
service NetworkService {
  /**
  * Notify network about a successful payment for the corresponding payment intent
  */
  rpc ConfirmPayment(ConfirmPaymentRequest) returns (ConfirmPaymentResponse){
    option idempotency_level = IDEMPOTENT;
  };

  /**
  * Notify network about a payment failure for the corresponding payment intent
  */
  rpc RejectPaymentIntent(RejectPaymentIntentRequest) returns (RejectPaymentIntentResponse){
    option idempotency_level = IDEMPOTENT;
  };

  /**
  * Notify network about relation between payment intent and settlement transaction.
  * This method is not essential but helps to keep track of payment flow
  */
  rpc ConfirmSettlement(ConfirmSettlementRequest) returns (ConfirmSettlementResponse){
    option idempotency_level = IDEMPOTENT;
  };
}

/**
* ProviderService is implemented by provider to provide pay-in details fpr payment intents
*/
service ProviderService {
  /**
  * Network instructs provider to create payment details for the payment intent. Provide should return
  * a list of supported payment method along with URL where payer should be redirected.
  */
  rpc CreatePaymentIntent(CreatePaymentIntentRequest) returns (CreatePaymentIntentResponse){
    option idempotency_level = IDEMPOTENT;
  };

  /**
  * Network notifies provider about successful payout for the corresponding payment intent
  */
  rpc ConfirmPayout(ConfirmPayoutRequest) returns (ConfirmPayoutResponse){
    option idempotency_level = IDEMPOTENT;
  };
}

message CreatePaymentIntentRequest {
  uint64 payment_intent_id = 10 [(buf.validate.field).uint64.gt = 0]; // idempotency key

  string currency = 20 [(buf.validate.field).string = {
    len: 3,
    pattern: "^[A-Z]{3}$"
  }]; // pay-in currency

  tzero.v1.common.Decimal amount = 30 [(buf.validate.field).required = true]; // pay-in amount

  uint32 merchant_id = 50 [(buf.validate.field).uint64.gt = 0];
}

message CreatePaymentIntentResponse {
  repeated PaymentMethod payment_methods = 20 [(buf.validate.field).repeated.min_items = 1];

  message PaymentMethod {
    string payment_url = 10 [(buf.validate.field).string = {
      min_len: 1,
      max_len: 2048,
      pattern: "^https?://.+"
    }];

    tzero.v1.common.PaymentMethodType payment_method = 20 [(buf.validate.field).required = true];
  }
}

message ConfirmPaymentRequest {
  uint64 payment_intent_id = 10 [(buf.validate.field).uint64.gt = 0]; // payment_intent_id from CreatePaymentIntentRequest

  tzero.v1.common.PaymentMethodType payment_method = 20 [(buf.validate.field).enum = {
    not_in: [0]
  }];
}

message ConfirmPaymentResponse {
  tzero.v1.common.Decimal settlement_amount = 10; // settlement  amount denominated in settlement currency
  uint32 payout_provider_id = 20;
  repeated SettlementAddress settlement_addresses = 30; //payout provider could support multiple chains for settlement. Any of these could be used for settlement.

  message SettlementAddress {
    tzero.v1.common.Blockchain chain = 10;
    tzero.v1.common.Stablecoin stablecoin = 20;
    string address = 30;
  }
}

message RejectPaymentIntentRequest {
  uint64 payment_intent_id = 10; // payment_intent_id from CreatePaymentIntentRequest
  string reason = 20;
}

message RejectPaymentIntentResponse {
}

message ConfirmPayoutRequest {
  uint64 payment_intent_id = 10; // payment_intent_id from CreatePaymentIntentRequest
  uint64 payment_id = 20; // corresponding payment_id for this payment intent
}

message ConfirmPayoutResponse {
}


message ConfirmSettlementRequest {
  tzero.v1.common.Blockchain blockchain = 10;
  string tx_hash = 20;
  repeated uint64 payment_intent_id = 30; // list of payment_intent_id's for this settlement (on-chain) transaction
}

message ConfirmSettlementResponse {

}