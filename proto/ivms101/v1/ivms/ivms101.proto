// Specification Copyright (c) 2020 Joint Working Group on interVASP Messaging Standards
// https://intervasp.org/
// https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf

// Protocol Buffer Specification Copyright (c) 2020 CipherTrace, Inc. https://ciphertrace.com

// Licensed under MIT License

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// NOTE ON THE SPECIFICATION MAPPING
// This protocol buffers specification has applied the Protocol Buffers style guide
// https://developers.google.com/protocol-buffers/docs/style to the ISVM101
// specification to be consistent with other Protocol Buffers specifications and to
// avoid common pitfalls when generating language specific classes.

syntax = "proto3";

package ivms101;

import "ivms101/v1/ivms/enum.proto";
import "buf/validate/validate.proto";

/***************************************************
 * Data Types Components
 ***************************************************/

message Person {

  oneof person {
    option (buf.validate.oneof).required = true;

    // Definition: a uniquely distinguishable individual; one single person.
    NaturalPerson natural_person = 1;

    // Definition: any entity other than a natural person that can establish a
    // permanent customer relationship with an affected entity or otherwise own
    // property. This can include companies, bodies corporate, foundations, anstalt,
    // partnerships, or associations and other relevantly similar entities.
    LegalPerson legal_person = 2;
  }

}

// Definition: refers to a uniquely distinguishable individual; one single person
message NaturalPerson {

  // Definition: the distinct words used as identification for an individual.
  NaturalPersonName name = 1 [(buf.validate.field).required = true];

  // Definition: the particulars of a location at which a person may be communicated with.
  repeated Address geographic_addresses = 2 [json_name = "geographicAddress"];

  // Definition: a distinct identifier used by governments of countries to uniquely
  // identify a natural or legal person.
  NationalIdentification national_identification = 3;

  // Definition: a distinct identifier that uniquely identifies the person to the
  // institution in context.
  string customer_identification = 4 [(buf.validate.field).string = {
    max_len: 50,
    pattern: "^$|^.*\\S.*$" //don't allow whitespace-only strings, but allow empty strings
  }];

  // Definition: date and place of birth of a person.
  DateAndPlaceOfBirth date_and_place_of_birth = 5;

  // Definition: country in which a person resides (the place of a person's home).
  // The value used for the field country must be present on the ISO-3166-1 alpha-2
  // codes or the value XX.
  string country_of_residence = 6 [(buf.validate.field).string = {
    pattern: "^$|^[A-Z]{2}$"  // allow empty, or ISO 3166-1 alpha-2, or "XX"
  }];
}

message NaturalPersonName {

  // At least one occurrence of naturalPersonNameID must have the value ‘LEGL’
  // specified in the element naturalPersonNameIdentifierType.
  // Definition: full name separated into primary and secondary identifier.
  repeated NaturalPersonNameId name_identifiers = 1 [json_name = "nameIdentifier", (buf.validate.field).repeated.min_items = 1];

  // Definition: full name separated into primary and secondary identifier using
  // local characters.
  repeated LocalNaturalPersonNameId local_name_identifiers = 2 [json_name = "localNameIdentifier"];

  // Definition: Alternate representation of a name that corresponds to the manner
  // the name is pronounced.
  repeated LocalNaturalPersonNameId phonetic_name_identifiers = 3 [json_name = "phoneticNameIdentifier"];
}

message NaturalPersonNameId {

  // Definition: This may be the family name, the maiden name or the married name,
  // the main name, the surname, and in some cases, the entire name where the natural
  // person’s name cannot be divided into two parts, or where the sender is unable to
  // divide the natural person’s name into two parts.
  string primary_identifier = 1 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 100,
    pattern: ".*\\S.*" // must not be empty or consist solely of whitespace
  }];

  // Definition: These may be the forenames, familiar names, given names, initials,
  // prefixes, suffixes or Roman numerals (where considered to be legally part of the
  // name) or any other secondary names.
  string secondary_identifier = 2 [(buf.validate.field).string = {
    max_len: 100,
    pattern: "^$|^.*\\S.*$" //don't allow whitespace-only strings, but allow empty strings
  }];

  // Definition: The nature of the name specified.
  NaturalPersonNameTypeCode name_identifier_type = 3  [(buf.validate.field).required = true];
}

message LocalNaturalPersonNameId {

  // Definition: This may be the family name, the maiden name or the married name,
  // the main name, the surname, and in some cases, the entire name where the natural
  // person’s name cannot be divided into two parts, or where the sender is unable to
  // divide the natural person’s name into two parts.
  string primary_identifier = 1 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 100,
    pattern: ".*\\S.*" // must not be empty or consist solely of whitespace
  }];

  // Definition: These may be the forenames, familiar names, given names, initials,
  // prefixes, suffixes or Roman numerals (where considered to be legally part of
  // the name) or any other secondary names.
  string secondary_identifier = 2 [(buf.validate.field).string = {
    max_len: 100,
    pattern: "^$|^.*\\S.*$" //don't allow whitespace-only strings, but allow empty strings
  }];

  // Definition: The nature of the name specified.
  NaturalPersonNameTypeCode name_identifier_type = 3 [(buf.validate.field).required = true];
}

// Constraint: ValidAddress
// There must be at least one occurrence of the element addressLine or (streetName and
// buildingName and/or buildingNumber).
message Address {

  // Definition: Identifies the nature of the address.
  AddressTypeCode address_type = 1 [(buf.validate.field).required = true];

  // Definition: Identification of a division of a large organisation or building.
  string department = 2 [(buf.validate.field).string = {
    max_len: 50,
    pattern: "^$|^.*\\S.*$"  // allow empty, disallow whitespace-only
  }];

  // Definition: Identification of a sub-division of a large organisation or building.
  string sub_department = 3 [(buf.validate.field).string = {
    max_len: 70,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Name of a street or thoroughfare.
  string street_name = 4 [(buf.validate.field).string = {
    max_len: 70,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Number that identifies the position of a building on a street.
  string building_number = 5 [(buf.validate.field).string = {
    max_len: 16,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Name of the building or house.
  string building_name = 6 [(buf.validate.field).string = {
    max_len: 35,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Floor or storey within a building.
  string floor = 7 [(buf.validate.field).string = {
    max_len: 70,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Numbered box in a post office, assigned to a person or organisation,
  // where letters are kept until called for.
  string post_box = 8 [(buf.validate.field).string = {
    max_len: 16,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Building room number.
  string room = 9 [(buf.validate.field).string = {
    max_len: 70,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Identifier consisting of a group of letters and/or numbers that is
  // added to a postal address to assist the sorting of mail.
  string post_code = 10 [(buf.validate.field).string = {
    max_len: 16,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Name of a built-up area, with defined boundaries and a local government.
  string town_name = 11 [(buf.validate.field).string = {
    max_len: 35,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Specific location name within the town.
  string town_location_name = 12 [(buf.validate.field).string = {
    max_len: 35,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Identifies a subdivision within a country subdivision.
  string district_name = 13 [(buf.validate.field).string = {
    max_len: 35,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Identifies a subdivision of a country for example, state, region,
  // province, départment or county.
  string country_sub_division = 14 [(buf.validate.field).string = {
    max_len: 35,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: Information that locates and identifies a specific address, as
  // defined by postal services, presented in free format text.
  repeated string address_line = 15 [
    json_name = "addressLine",
    (buf.validate.field).repeated = {
      max_items: 7,
      items: {
        string: {
          max_len: 70,
          pattern: "^$|^.*\\S.*$"  // allow empty, disallow whitespace-only
        }
      }
    }
  ];

  // Constraint: The value used for the field country must be present on the
  // ISO-3166-1 alpha-2 codes or the value XX.
  string country = 16 [(buf.validate.field).string = {
    pattern: "^[A-Z]{2}$" // allow ISO 3166-1 alpha-2, or "XX"
  }];
}

// Constraint: DateInPast
// If dateOfBirth is specified, the date specified must be a historic date (i.e. a date
// prior to the current date)
message DateAndPlaceOfBirth {

  // Definition: Date on which a person is born.
  // Definition: A point in time, represented as a day within the calendar year.
  // Compliant with ISO 8601.
  // Format: YYYY-MM-DD
  string date_of_birth = 1 [(buf.validate.field).string = {
    pattern: "^([0-9]{4})-([0-9]{2})-([0-9]{2})$"
  }];

  // Definition: The town and/or the city and/or the suburb and/or the country
  // subdivision and/or the country where the person was born.
  string place_of_birth = 2 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 70,
    pattern: ".*\\S.*" // must not be empty or consist solely of whitespace
  }];
}

// Constraint: ValidNationalIdentifierLegalPerson
// A legal person must have a value for nationalIdentifierType of either ‘RAID’ or
// ‘MISC’ or ‘LEIX’ or ‘TXID’.
// Constraint: CompleteNationalIdentifierLegalPerson
// A LegalPerson must not have a value for countryOfIssue and must have a value for the
// element RegistrationAuthority if the value for nationalIdentifierType is not ‘LEIX’
// Constraint: ValidLEI
// A LegalPerson with a nationalIdentifierType of ‘LEIX’ must have a value for the
// element nationalIdentifier that adheres to the convention as stated in datatype
// ‘LEIText’.
message NationalIdentification {

  // Definition: An identifier issued by an appropriate issuing authority.
  // Constraint: ValidLEI
  string national_identifier = 1 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 35,
    pattern: ".*\\S.*" // must not be empty or consist solely of whitespace
  }];

  // Definition: Specifies the type of identifier specified.
  NationalIdentifierTypeCode national_identifier_type = 2 [(buf.validate.field).required = true];

  // Definition: Country of the issuing authority.
  string country_of_issue = 3 [(buf.validate.field).string = {
    pattern: "^$|^[A-Z]{2}$"  // allow empty, or ISO 3166-1 alpha-2, or "XX"
  }];

  // Definition: A code specifying the registration authority.
  // Constraint: The value used for the applicable element must be present on the
  // GLEIF Registration Authorities List.
  string registration_authority = 4 [(buf.validate.field).string = {
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];
}

// Definition: refers to any entity other than a natural person that can establish a
// permanent customer relationship with an affected entity or otherwise own property.
// This can include companies, bodies corporate, foundations, anstalt, partnerships, or
// associations and other relevantly similar entities.
// Constraint: OriginatorInformationLegalPerson
// If the originator is a LegalPerson either geographicAddress (with an addressType
// value of ‘GEOG’) and/or nationalIdentification and/or customerNumber is required.
message LegalPerson {

  // Definition: The name of the legal person.
  // Constraint: LegalNamePresentLegalPerson
  // At least one occurrence of legalPersonNameIdentifier must have the value ‘LEGL’
  // specified in the element legalPersonNameIdentifierType.
  LegalPersonName name = 1 [(buf.validate.field).required = true];

  // Definition: The address of the legal person.
  repeated Address geographic_addresses = 2 [json_name = "geographicAddress"];

  // Definition: The unique identification number applied by the VASP to customer.
  // NOTE The specification has a descrepency in that 5.2.9.3.3 specifies an element
  // name as "customerNumber", while the table in 5.2.9.1 calls that element
  // "customerIdentification"
  string customer_number = 3 [(buf.validate.field).string = {
    max_len: 50,
    pattern: "^$|^.*\\S.*$" // allow empty, disallow whitespace-only
  }];

  // Definition: A distinct identifier used by governments of countries to uniquely
  // identify a natural or legal person.
  NationalIdentification national_identification = 4;

  // Definition: The country in which the legal person is registered.
  // Constraint: The value used for the field country must be present on the
  // ISO-3166-1 alpha-2 codes or the value XX.
  string country_of_registration = 5 [(buf.validate.field).string = {
    pattern: "^$|^[A-Z]{2}$"  // allow empty, or ISO 3166-1 alpha-2, or "XX"
  }];
}

message LegalPersonName {

  // Definition: The name and type of name by which the legal person is known.
  // Constraint: LegalNamePresent
  // At least one occurrence of legalPersonNameIdentifier must have the value
  // ‘LEGL’ specified in the element legalPersonNameIdentifierType.
  repeated LegalPersonNameId name_identifiers = 1 [json_name = "nameIdentifier",
    (buf.validate.field).repeated.min_items = 1
  ];

  // Definition: The name and type of name by which the legal person is known using
  // local characters.
  repeated LocalLegalPersonNameId local_name_identifiers = 2 [json_name = "localNameIdentifier"];

  // Definition: The name and type of name by which the legal person is known using
  // local characters.
  repeated LocalLegalPersonNameId phonetic_name_identifiers = 3 [json_name = "phoneticNameIdentifier"];
}

message LegalPersonNameId {

  // Definition: Name by which the legal person is known.
  string legal_person_name = 1 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 100,
    pattern: ".*\\S.*" // must not be empty or consist solely of whitespace
  }];

  // Definition: The nature of the name specified.
  LegalPersonNameTypeCode legal_person_name_identifier_type = 2 [(buf.validate.field).required = true];
}

message LocalLegalPersonNameId {

  // Definition: Name by which the legal person is known.
  string legal_person_name = 1 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 100,
    pattern: ".*\\S.*" // must not be empty or consist solely of whitespace
  }];

  // Definition: The nature of the name specified.
  LegalPersonNameTypeCode legal_person_name_identifier_type = 2 [(buf.validate.field).required = true];
}